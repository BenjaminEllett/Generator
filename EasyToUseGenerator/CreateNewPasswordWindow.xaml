<!--
    MIT License

    Copyright(c) 2019-2021 Benjamin Ellett

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
-->

<local:StandardWindow x:Class="EasyToUseGenerator.CreateNewPasswordWindow"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:local="clr-namespace:EasyToUseGenerator"
                      xmlns:resources="clr-namespace:EasyToUseGenerator.Resources"
                      
                      Title="{x:Static resources:UserInterface.CreateNewPasswordWindowTitle}"

                      ResizeMode="NoResize"
                      WindowStartupLocation="CenterOwner"
                      
                      Style="{StaticResource StandardWindowStyle}"
                                            
                      TitleBarBackground="DarkSlateGray"
                      
                      Height="270" 
                      Width="385">

    <Window.Resources>
        <local:BoolNotOperationConverter x:Key="BoolNotOperationConverter"/>
    </Window.Resources>

    <StackPanel Style="{StaticResource StandardMainStackPanelStyle}">
        <Label Content="{x:Static resources:UserInterface.NewPasswordCharacterSetLabel}"
               Target="{Binding ElementName=newPasswordCharacterSetRadioButtonGroupStackPanel}"
               Style="{StaticResource StandardLabelStyle}"
               Margin="0"/>

        <StackPanel x:Name="newPasswordCharacterSetRadioButtonGroupStackPanel"
                    Orientation="Vertical">
            <StackPanel.Resources>
                <Style x:Key="CharacterSetRadioButtonGroupStyle" 
                       TargetType="RadioButton">
                    <Setter Property="GroupName" Value="NewPasswordCharacterSetRadioButtonGroup"/>
                    <Setter Property="Margin" Value="{StaticResource StandardVerticalSpaceBetweenItemsMargin}"/>
                </Style>
            </StackPanel.Resources>

            <RadioButton Content="{x:Static resources:UserInterface.AnyCharacterWhichCanBeTypedRadioButtonText}"
                         ToolTip="{x:Static resources:UserInterface.AnyCharacterWhichCanBeTypedRadioButtonToolTipText}"
                         IsChecked="{Binding IsAnyKeyWhichCanBeTypedRadioButtonChecked, Mode=OneTime}"
                         Checked="OnAnyKeyWhichCanBeTypedRadioButtonChecked"
                         
                           Style="{StaticResource CharacterSetRadioButtonGroupStyle}"/>

            <RadioButton Content="{x:Static resources:UserInterface.LettersAndNumbersRadioButtonText}"
                         ToolTip="{x:Static resources:UserInterface.LettersAndNumbersRadioButtonToolTipText}"
                         IsChecked="{Binding IsLettersAndNumbersRadioButtonChecked, Mode=OneTime}"
                         Checked="OnLettersAndNumbersRadioButtonChecked"
                         
                         Style="{StaticResource CharacterSetRadioButtonGroupStyle}"/>

            <RadioButton Content="{x:Static resources:UserInterface.NumbersRadioButtonText}"
                         ToolTip="{x:Static resources:UserInterface.NumbersRadioButtonToolTipText}"
                         Checked="OnNumbersRadioButtonChecked"
                         IsChecked="{Binding IsNumbersRadioButtonChecked, Mode=OneTime}"
                         
                         Style="{StaticResource CharacterSetRadioButtonGroupStyle}"/>
        </StackPanel>

        <Label x:Name="newPasswordLengthLabel"
               Content="{x:Static resources:UserInterface.NewPasswordLengthLabel}"
               Target="{Binding ElementName=passwordLengthTextBox}"
               Margin="{StaticResource StandardLargeVerticalSpaceBetweenItemsMargin}"
               Style="{StaticResource StandardLabelStyle}"/>
        
        <!-- The max text length is 10 because it makes it easier to edit numbers. Valid password lengths are between 1 and 38 characters. -->
        <TextBox x:Name="passwordLengthTextBox"
                 AutomationProperties.LabeledBy="{Binding ElementName=newPasswordLengthLabel}"
                                  
                 MaxLength="10"
                 MaxLines="1"   
                 
                 HorizontalAlignment="Left"
                                  
                 Margin="{StaticResource StandardVerticalSpaceBetweenItemsMargin}"
                 Width="365">
            <TextBox.Text>
                <Binding Path="NewPasswordLengthInChars"
                         Mode="TwoWay"
                         UpdateSourceTrigger="LostFocus">
                    <Binding.ValidationRules>
                        <local:PasswordLengthBindingValidationRule/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox.Text>

            <TextBox.Style>
                <Style BasedOn="{StaticResource StandardTextBoxStyle}"
                       TargetType="TextBox">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip" 
                                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                            <Setter Property="BorderBrush" Value="Red"/>
                            <Setter Property="Background" Value="Red"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
        </TextBox>

        <CheckBox Content="{x:Static resources:UserInterface.UpdateDefaultPasswordLengthAndTypeCheckBoxText}"
                  IsChecked="{Binding ShouldUpdateDefaultPasswordCharacteristics, Mode=TwoWay}"
                  
                  Style="{StaticResource StandardCheckBoxStyle}"
                  
                  Margin="{StaticResource StandardLargeVerticalSpaceBetweenItemsMargin}"/>

        <!-- Button Stack Panel -->
        <StackPanel Orientation="Horizontal"
                    Margin="{StaticResource StandardLargeVerticalSpaceBetweenItemsMargin}">

            <Button Content="{x:Static resources:UserInterface.CreatePasswordButtonText}"
                    Click="OnCreatePasswordClicked"
                    IsEnabled="{Binding ElementName=passwordLengthTextBox, Path=(Validation.HasError), Mode=OneWay, Converter={StaticResource BoolNotOperationConverter}}"
                    Style="{StaticResource StandardButtonStyle}"/>

            <Button Content="{x:Static resources:UserInterface.CancelButtonText}"
                    Click="OnCancelClicked"                    
                    
                    IsCancel="True"
                    
                    Style="{StaticResource StandardButtonStyle}"
                    Margin="{StaticResource StandardHorizonalSpaceBetweenItemsMargin}"/>
        </StackPanel>
    </StackPanel>
</local:StandardWindow>
